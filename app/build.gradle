apply plugin: 'com.android.application'
apply from: '../code_quality_tools/jacoco.gradle'
apply from: '../code_quality_tools/quality.gradle'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'io.fabric'

android {
    // Declared in dependencies.gradle in the root of the project.
    compileSdkVersion versions.compileSdk

    defaultConfig {
        applicationId 'ru.shmakova.painter'
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.code // Notice that you may want to use BUILD_NUMBER from CI in real project with own CI.
        versionName versions.name

        // Make generated apks contain version name and code.
        archivesBaseName = "app-${versions.name}-${versions.code}"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        yamblz {
            storeFile file('keystore.jks')
            storePassword 'yamblz'
            keyAlias 'yamblz'
            keyPassword 'yamblz'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.yamblz
            applicationIdSuffix '.debug'
        }

        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        warningsAsErrors true
        abortOnError true // Fail early.
    }

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    // This allows us see tests execution progress in the output on the CI.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            exceptionFormat 'full'
        }
    }
}

// Libraries declared in dependencies.gradle in the root of the project
dependencies {
    implementation libraries.dagger
    annotationProcessor libraries.daggerCompiler

    implementation libraries.supportAnnotations
    implementation libraries.supportAppCompat
    implementation libraries.supportDesign
    implementation libraries.supportCustomTabs
    implementation libraries.supportAnimated
    implementation libraries.supportPreferences

    implementation libraries.butterKnife
    annotationProcessor libraries.butterKnifeCompiler

    implementation libraries.timber
    implementation libraries.colorpicker
    implementation libraries.firebase
    implementation libraries.appmetrica
    implementation libraries.rxandroid
    implementation libraries.rxjava
    implementation libraries.rxbinding
    implementation libraries.rxbindingSupport
    implementation libraries.rxbindingSupport

    testImplementation libraries.junit
    testImplementation libraries.robolectric
    testImplementation libraries.assertJ
    testImplementation libraries.equalsVerifier
    testImplementation libraries.mockitoCore

    androidTestImplementation libraries.supportTestRunner
    androidTestImplementation libraries.supportTestRules
    androidTestImplementation libraries.espressoCore
    androidTestImplementation(libraries.espressoContrib) {
        // Causes IncompatibleClassChangeError. As alwaysâ€¦
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'
    }

    implementation(libraries.crashlytics) {
        transitive = true;
    }
}

configurations.all {
    resolutionStrategy {
        // Force our version of support-annotations, we have a conflict between app and androidTest dependency resolution.
        force libraries.supportAnnotations
        force libraries.supportDesign
        force libraries.supportAppCompat
        force libraries.supportCustomTabs
        force libraries.supportAnimated
        force libraries.supportPreferences
    }
}

// Check if the build requires dex count
def withDexcount = project.hasProperty('withDexcount')
if (withDexcount) {
    apply plugin: 'com.getkeepsafe.dexcount'

    dexcount {
        format = 'list'
        includeFieldCount = true
        includeTotalMethodCount = true
        verbose = false
        maxTreeDepth = Integer.MAX_VALUE
    }
}

apply plugin: 'com.google.gms.google-services'